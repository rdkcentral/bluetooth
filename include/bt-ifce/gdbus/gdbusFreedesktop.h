/*
 * Generated by gdbus-codegen 2.58.3 from org.freedesktop.xml. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#ifndef __GDBUSFREEDESKTOP_H__
#define __GDBUSFREEDESKTOP_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Introspectable */

#define TYPE_DBUS_INTROSPECTABLE (dbus_introspectable_get_type ())
#define DBUS_INTROSPECTABLE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_DBUS_INTROSPECTABLE, DBusIntrospectable))
#define IS_DBUS_INTROSPECTABLE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_DBUS_INTROSPECTABLE))
#define DBUS_INTROSPECTABLE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_DBUS_INTROSPECTABLE, DBusIntrospectableIface))

struct _DBusIntrospectable;
typedef struct _DBusIntrospectable DBusIntrospectable;
typedef struct _DBusIntrospectableIface DBusIntrospectableIface;

struct _DBusIntrospectableIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_introspect) (
    DBusIntrospectable *object,
    GDBusMethodInvocation *invocation);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DBusIntrospectable, g_object_unref)
#endif

GType dbus_introspectable_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *dbus_introspectable_interface_info (void);
guint dbus_introspectable_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void dbus_introspectable_complete_introspect (
    DBusIntrospectable *object,
    GDBusMethodInvocation *invocation,
    const gchar *xml);



/* D-Bus method calls: */
void dbus_introspectable_call_introspect (
    DBusIntrospectable *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_introspectable_call_introspect_finish (
    DBusIntrospectable *proxy,
    gchar **out_xml,
    GAsyncResult *res,
    GError **error);

gboolean dbus_introspectable_call_introspect_sync (
    DBusIntrospectable *proxy,
    gchar **out_xml,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_DBUS_INTROSPECTABLE_PROXY (dbus_introspectable_proxy_get_type ())
#define DBUS_INTROSPECTABLE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_DBUS_INTROSPECTABLE_PROXY, DBusIntrospectableProxy))
#define DBUS_INTROSPECTABLE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_DBUS_INTROSPECTABLE_PROXY, DBusIntrospectableProxyClass))
#define DBUS_INTROSPECTABLE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_DBUS_INTROSPECTABLE_PROXY, DBusIntrospectableProxyClass))
#define IS_DBUS_INTROSPECTABLE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_DBUS_INTROSPECTABLE_PROXY))
#define IS_DBUS_INTROSPECTABLE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_DBUS_INTROSPECTABLE_PROXY))

typedef struct _DBusIntrospectableProxy DBusIntrospectableProxy;
typedef struct _DBusIntrospectableProxyClass DBusIntrospectableProxyClass;
typedef struct _DBusIntrospectableProxyPrivate DBusIntrospectableProxyPrivate;

struct _DBusIntrospectableProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  DBusIntrospectableProxyPrivate *priv;
};

struct _DBusIntrospectableProxyClass
{
  GDBusProxyClass parent_class;
};

GType dbus_introspectable_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DBusIntrospectableProxy, g_object_unref)
#endif

void dbus_introspectable_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DBusIntrospectable *dbus_introspectable_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
DBusIntrospectable *dbus_introspectable_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void dbus_introspectable_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DBusIntrospectable *dbus_introspectable_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
DBusIntrospectable *dbus_introspectable_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_DBUS_INTROSPECTABLE_SKELETON (dbus_introspectable_skeleton_get_type ())
#define DBUS_INTROSPECTABLE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_DBUS_INTROSPECTABLE_SKELETON, DBusIntrospectableSkeleton))
#define DBUS_INTROSPECTABLE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_DBUS_INTROSPECTABLE_SKELETON, DBusIntrospectableSkeletonClass))
#define DBUS_INTROSPECTABLE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_DBUS_INTROSPECTABLE_SKELETON, DBusIntrospectableSkeletonClass))
#define IS_DBUS_INTROSPECTABLE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_DBUS_INTROSPECTABLE_SKELETON))
#define IS_DBUS_INTROSPECTABLE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_DBUS_INTROSPECTABLE_SKELETON))

typedef struct _DBusIntrospectableSkeleton DBusIntrospectableSkeleton;
typedef struct _DBusIntrospectableSkeletonClass DBusIntrospectableSkeletonClass;
typedef struct _DBusIntrospectableSkeletonPrivate DBusIntrospectableSkeletonPrivate;

struct _DBusIntrospectableSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  DBusIntrospectableSkeletonPrivate *priv;
};

struct _DBusIntrospectableSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType dbus_introspectable_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DBusIntrospectableSkeleton, g_object_unref)
#endif

DBusIntrospectable *dbus_introspectable_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.ObjectManager */

#define TYPE_DBUS_OBJECT_MANAGER (dbus_object_manager_get_type ())
#define DBUS_OBJECT_MANAGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_DBUS_OBJECT_MANAGER, DBusObjectManager))
#define IS_DBUS_OBJECT_MANAGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_DBUS_OBJECT_MANAGER))
#define DBUS_OBJECT_MANAGER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_DBUS_OBJECT_MANAGER, DBusObjectManagerIface))

struct _DBusObjectManager;
typedef struct _DBusObjectManager DBusObjectManager;
typedef struct _DBusObjectManagerIface DBusObjectManagerIface;

struct _DBusObjectManagerIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get_managed_objects) (
    DBusObjectManager *object,
    GDBusMethodInvocation *invocation);

  void (*interfaces_added) (
    DBusObjectManager *object,
    const gchar *arg_object,
    GVariant *arg_interfaces);

  void (*interfaces_removed) (
    DBusObjectManager *object,
    const gchar *arg_object,
    const gchar *const *arg_interfaces);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DBusObjectManager, g_object_unref)
#endif

GType dbus_object_manager_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *dbus_object_manager_interface_info (void);
guint dbus_object_manager_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void dbus_object_manager_complete_get_managed_objects (
    DBusObjectManager *object,
    GDBusMethodInvocation *invocation,
    GVariant *objects);



/* D-Bus signal emissions functions: */
void dbus_object_manager_emit_interfaces_added (
    DBusObjectManager *object,
    const gchar *arg_object,
    GVariant *arg_interfaces);

void dbus_object_manager_emit_interfaces_removed (
    DBusObjectManager *object,
    const gchar *arg_object,
    const gchar *const *arg_interfaces);



/* D-Bus method calls: */
void dbus_object_manager_call_get_managed_objects (
    DBusObjectManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_object_manager_call_get_managed_objects_finish (
    DBusObjectManager *proxy,
    GVariant **out_objects,
    GAsyncResult *res,
    GError **error);

gboolean dbus_object_manager_call_get_managed_objects_sync (
    DBusObjectManager *proxy,
    GVariant **out_objects,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_DBUS_OBJECT_MANAGER_PROXY (dbus_object_manager_proxy_get_type ())
#define DBUS_OBJECT_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_DBUS_OBJECT_MANAGER_PROXY, DBusObjectManagerProxy))
#define DBUS_OBJECT_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_DBUS_OBJECT_MANAGER_PROXY, DBusObjectManagerProxyClass))
#define DBUS_OBJECT_MANAGER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_DBUS_OBJECT_MANAGER_PROXY, DBusObjectManagerProxyClass))
#define IS_DBUS_OBJECT_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_DBUS_OBJECT_MANAGER_PROXY))
#define IS_DBUS_OBJECT_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_DBUS_OBJECT_MANAGER_PROXY))

typedef struct _DBusObjectManagerProxy DBusObjectManagerProxy;
typedef struct _DBusObjectManagerProxyClass DBusObjectManagerProxyClass;
typedef struct _DBusObjectManagerProxyPrivate DBusObjectManagerProxyPrivate;

struct _DBusObjectManagerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  DBusObjectManagerProxyPrivate *priv;
};

struct _DBusObjectManagerProxyClass
{
  GDBusProxyClass parent_class;
};

GType dbus_object_manager_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DBusObjectManagerProxy, g_object_unref)
#endif

void dbus_object_manager_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DBusObjectManager *dbus_object_manager_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
DBusObjectManager *dbus_object_manager_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void dbus_object_manager_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DBusObjectManager *dbus_object_manager_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
DBusObjectManager *dbus_object_manager_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_DBUS_OBJECT_MANAGER_SKELETON (dbus_object_manager_skeleton_get_type ())
#define DBUS_OBJECT_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_DBUS_OBJECT_MANAGER_SKELETON, DBusObjectManagerSkeleton))
#define DBUS_OBJECT_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_DBUS_OBJECT_MANAGER_SKELETON, DBusObjectManagerSkeletonClass))
#define DBUS_OBJECT_MANAGER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_DBUS_OBJECT_MANAGER_SKELETON, DBusObjectManagerSkeletonClass))
#define IS_DBUS_OBJECT_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_DBUS_OBJECT_MANAGER_SKELETON))
#define IS_DBUS_OBJECT_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_DBUS_OBJECT_MANAGER_SKELETON))

typedef struct _DBusObjectManagerSkeleton DBusObjectManagerSkeleton;
typedef struct _DBusObjectManagerSkeletonClass DBusObjectManagerSkeletonClass;
typedef struct _DBusObjectManagerSkeletonPrivate DBusObjectManagerSkeletonPrivate;

struct _DBusObjectManagerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  DBusObjectManagerSkeletonPrivate *priv;
};

struct _DBusObjectManagerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType dbus_object_manager_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DBusObjectManagerSkeleton, g_object_unref)
#endif

DBusObjectManager *dbus_object_manager_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Properties */

#define TYPE_DBUS_PROPERTIES (dbus_properties_get_type ())
#define DBUS_PROPERTIES(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_DBUS_PROPERTIES, DBusProperties))
#define IS_DBUS_PROPERTIES(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_DBUS_PROPERTIES))
#define DBUS_PROPERTIES_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_DBUS_PROPERTIES, DBusPropertiesIface))

struct _DBusProperties;
typedef struct _DBusProperties DBusProperties;
typedef struct _DBusPropertiesIface DBusPropertiesIface;

struct _DBusPropertiesIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get) (
    DBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_interface,
    const gchar *arg_name);

  gboolean (*handle_get_all) (
    DBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_interface);

  gboolean (*handle_set) (
    DBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_interface,
    const gchar *arg_name,
    GVariant *arg_value);

  void (*properties_changed) (
    DBusProperties *object,
    const gchar *arg_interface,
    GVariant *arg_changed_properties,
    const gchar *const *arg_invalidated_properties);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DBusProperties, g_object_unref)
#endif

GType dbus_properties_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *dbus_properties_interface_info (void);
guint dbus_properties_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void dbus_properties_complete_get (
    DBusProperties *object,
    GDBusMethodInvocation *invocation,
    GVariant *value);

void dbus_properties_complete_set (
    DBusProperties *object,
    GDBusMethodInvocation *invocation);

void dbus_properties_complete_get_all (
    DBusProperties *object,
    GDBusMethodInvocation *invocation,
    GVariant *properties);



/* D-Bus signal emissions functions: */
void dbus_properties_emit_properties_changed (
    DBusProperties *object,
    const gchar *arg_interface,
    GVariant *arg_changed_properties,
    const gchar *const *arg_invalidated_properties);



/* D-Bus method calls: */
void dbus_properties_call_get (
    DBusProperties *proxy,
    const gchar *arg_interface,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_properties_call_get_finish (
    DBusProperties *proxy,
    GVariant **out_value,
    GAsyncResult *res,
    GError **error);

gboolean dbus_properties_call_get_sync (
    DBusProperties *proxy,
    const gchar *arg_interface,
    const gchar *arg_name,
    GVariant **out_value,
    GCancellable *cancellable,
    GError **error);

void dbus_properties_call_set (
    DBusProperties *proxy,
    const gchar *arg_interface,
    const gchar *arg_name,
    GVariant *arg_value,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_properties_call_set_finish (
    DBusProperties *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_properties_call_set_sync (
    DBusProperties *proxy,
    const gchar *arg_interface,
    const gchar *arg_name,
    GVariant *arg_value,
    GCancellable *cancellable,
    GError **error);

void dbus_properties_call_get_all (
    DBusProperties *proxy,
    const gchar *arg_interface,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_properties_call_get_all_finish (
    DBusProperties *proxy,
    GVariant **out_properties,
    GAsyncResult *res,
    GError **error);

gboolean dbus_properties_call_get_all_sync (
    DBusProperties *proxy,
    const gchar *arg_interface,
    GVariant **out_properties,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_DBUS_PROPERTIES_PROXY (dbus_properties_proxy_get_type ())
#define DBUS_PROPERTIES_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_DBUS_PROPERTIES_PROXY, DBusPropertiesProxy))
#define DBUS_PROPERTIES_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_DBUS_PROPERTIES_PROXY, DBusPropertiesProxyClass))
#define DBUS_PROPERTIES_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_DBUS_PROPERTIES_PROXY, DBusPropertiesProxyClass))
#define IS_DBUS_PROPERTIES_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_DBUS_PROPERTIES_PROXY))
#define IS_DBUS_PROPERTIES_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_DBUS_PROPERTIES_PROXY))

typedef struct _DBusPropertiesProxy DBusPropertiesProxy;
typedef struct _DBusPropertiesProxyClass DBusPropertiesProxyClass;
typedef struct _DBusPropertiesProxyPrivate DBusPropertiesProxyPrivate;

struct _DBusPropertiesProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  DBusPropertiesProxyPrivate *priv;
};

struct _DBusPropertiesProxyClass
{
  GDBusProxyClass parent_class;
};

GType dbus_properties_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DBusPropertiesProxy, g_object_unref)
#endif

void dbus_properties_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DBusProperties *dbus_properties_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
DBusProperties *dbus_properties_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void dbus_properties_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DBusProperties *dbus_properties_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
DBusProperties *dbus_properties_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_DBUS_PROPERTIES_SKELETON (dbus_properties_skeleton_get_type ())
#define DBUS_PROPERTIES_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_DBUS_PROPERTIES_SKELETON, DBusPropertiesSkeleton))
#define DBUS_PROPERTIES_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_DBUS_PROPERTIES_SKELETON, DBusPropertiesSkeletonClass))
#define DBUS_PROPERTIES_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_DBUS_PROPERTIES_SKELETON, DBusPropertiesSkeletonClass))
#define IS_DBUS_PROPERTIES_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_DBUS_PROPERTIES_SKELETON))
#define IS_DBUS_PROPERTIES_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_DBUS_PROPERTIES_SKELETON))

typedef struct _DBusPropertiesSkeleton DBusPropertiesSkeleton;
typedef struct _DBusPropertiesSkeletonClass DBusPropertiesSkeletonClass;
typedef struct _DBusPropertiesSkeletonPrivate DBusPropertiesSkeletonPrivate;

struct _DBusPropertiesSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  DBusPropertiesSkeletonPrivate *priv;
};

struct _DBusPropertiesSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType dbus_properties_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DBusPropertiesSkeleton, g_object_unref)
#endif

DBusProperties *dbus_properties_skeleton_new (void);


G_END_DECLS

#endif /* __GDBUSFREEDESKTOP_H__ */
